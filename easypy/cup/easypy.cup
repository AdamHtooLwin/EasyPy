/* ----------------------User code--------------------*/

package src;
import java.util.*;

parser code {:
    public void sem_error(String context , String message)
    {
        System.err.println("Semantic Error: "+ "<"+context+">" + message);
        System.exit(1);
    }

    public void type_error (String context, String message)
    {
        System.err.println("Type Error:"+ "<"+context+">" + message);
        System.exit(1);
    }
:};
   
/* ------------Grammar symbol declarations----------- */
   
terminal    COMMA, SEMI, EQ, PUBLISH;
terminal    PLUS, MINUS, TIMES, DIVIDE, MOD, LPAR, RPAR, LCURL, RCURL;
terminal    WHILE, DO, IF, ELSE, LT, GT, LTE, GTE, EQUAL, NOTEQUAL, OR, AND;
terminal    INT, BOOL, CHAR, FLOAT;

terminal Integer   INTEGER_LITERAL;
terminal Boolean   BOOLEAN_LITERAL;
terminal Float     FLOATING_LITERAL;
terminal String    CHAR_LITERAL;
terminal String    ID;

non terminal                    program;
non terminal Type               type;
non terminal StringBuilder      declaration;

non terminal Statement              publish;
non terminal StatementList              statement_list, while, ifthen;
non terminal Expression               E, T, F, L, logical;
non terminal ArrayList<String>  id_list;

/* Precedences */
precedence left SEMI;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
   
/* ------------Grammar rules----------- */

program ::= declaration:d SEMI statement_list:sl
                {:
                System.out.println("");
                System.out.println("\n===========PROGRAM OUTPUT===========");
                sl.execute();

                System.out.println("\n===========PREFIX===========");
                System.out.println(d.toString());
                System.out.println(sl.getPrefix().toString());
                :};

statement_list ::= declaration:d SEMI statement_list:sl
                    {: RESULT = sl; :}
                | statement_list:sl1 SEMI statement_list:sl2
                    {:
                    if(sl2 == null){
                        RESULT = sl1;
                    }
                    else {
                        RESULT = new StatementList(sl1, sl2);
                    }

                    :}
                | {: :}
                ;


declaration ::= type:t id_list:il
                {:
                StringBuilder prefix = new StringBuilder();
                for (String i : il){
//                    System.out.println("Declaring variable " + i + " of type " + t.getCode());
                    Memory m = Memory.getInstance();
                    if (m.SymbolTable.containsKey(i)){
                        parser.sem_error(i,"Duplicate declaration "+i);
                    }
                    m.SymbolTable.put(i, t);
                    prefix.append(i + " : " + t.code);
                    prefix.append("\n");
                }
                RESULT = prefix;
                :};

id_list ::=   id_list:il COMMA ID:i
            {:
                il.add(i);
                RESULT = il;
            :}
          |
            ID:i
            {:
                ArrayList<String> list = new ArrayList<String>();
                list.add(i);
                RESULT = list;
            :};

type ::= INT
            {: RESULT = new Type(Type.INTEGER, "int"); :}
        | FLOAT
            {: RESULT = new Type(Type.FLOAT, "float"); :}
        | CHAR
            {: RESULT = new Type(Type.STRING, "char"); :}
        | BOOL
            {: RESULT = new Type(Type.BOOLEAN, "bool"); :};

statement_list ::= WHILE LPAR L:l RPAR LCURL statement_list:sl RCURL
                {:
                if((Boolean) l.getType().isBool()){
                    RESULT = new StatementList(Statement.whileloop(l, sl));
                }
                else {
                     parser.type_error("l", " : expression in the while condition must be boolean.");
                }
                :}
                ;

statement_list ::=  IF LPAR L:l RPAR LCURL statement_list:sl RCURL
            {:
                System.out.println("At ifthen");
                if((Boolean) l.getType().isBool()){
                    RESULT = new StatementList(Statement.ifthen(l, sl));
                }
                else {
                     parser.type_error("l", " : expression in the if condition must be boolean.");
                }

            :}
          |
            IF LPAR L:l RPAR LCURL statement_list:sl1 RCURL ELSE LCURL statement_list:sl2 RCURL
            {:
                if((Boolean) l.getType().isBool()){
                    RESULT = new StatementList(Statement.ifthenelse(l, sl1, sl2));
                }
                else {
                     parser.type_error("l", " : expression in the if condition must be boolean.");
                }
             :};

statement_list ::= ID:i EQ E:e
                {:
                Memory m = Memory.getInstance();
                if (!m.SymbolTable.containsKey(i)){
                    parser.sem_error(i,"Variable undeclared");
                }
                else {
                    if (m.SymbolTable.get(i).tag == e.getType().tag){
                         RESULT = new StatementList(Statement.assignment(i,e));
                    }
                    else {
                        parser.type_error("e", " : expression in the assignment statement must have the type " + m.SymbolTable.get(i).code);
                    }
                }
                :};

statement_list  ::= PUBLISH LPAR E:e RPAR
                {: RESULT = new StatementList(Statement.print(e)); :}
                |
                PUBLISH LPAR L:l RPAR
                {: RESULT = new StatementList(Statement.print(l)); :}
                ;

E    ::= E:e PLUS T:t
                {:
                RESULT = new Expression(new Args(e,t), sym.PLUS);
                :}
            | E:e MINUS T:t
                {:
                RESULT = new Expression(new Args(e,t), sym.MINUS);
                :}
            | T:t
                {: RESULT = t; :}
            ;

T       ::= T:t TIMES F:f
                {:
                RESULT = new Expression(new Args(t,f), sym.TIMES);
                :}
            | T:t DIVIDE F:f
                {:
                RESULT = new Expression(new Args(t,f), sym.DIVIDE);
                :}
            | T:t MOD F:f
                {:
                RESULT = new Expression(new Args(t,f), sym.MOD);
                :}
            | F:f
                {:
                RESULT = f;
                :};

F       ::= LPAR E:e RPAR
                {:
                RESULT = e;
                :}
            | INTEGER_LITERAL:n
                {:
                RESULT = new Expression(n);
                :}
            | MINUS INTEGER_LITERAL:n
                {:
                RESULT = new Expression(-n);
                :}
            | BOOLEAN_LITERAL:b
                {:
                RESULT = new Expression(b);
                :}
            | FLOATING_LITERAL:f
                {:
                RESULT = new Expression(f);
                :}
            | MINUS FLOATING_LITERAL:f
                {:
                RESULT = new Expression(-f);
                :}
            | CHAR_LITERAL:c
                {:
                RESULT = new Expression(c);
                :}
            | ID:i
                {:
                RESULT = new Expression(i, true);
                :}
            ;

L ::= logical:l1 AND logical:l2
            {: RESULT = new Expression(new Args(l1, l2), sym.AND); :}
            | logical:l1 OR logical:l2
            {: RESULT = new Expression(new Args(l1, l2), sym.OR); :}
            | logical:l
            {: RESULT = l; :}
            ;

logical ::=
          E:e1 LT E:e2
          {:RESULT = new Expression(new Args(e1, e2), sym.LT);:}
          |
          E:e1 GT E:e2
          {:RESULT = new Expression(new Args(e1, e2), sym.GT);:}
          |
          E:e1 GTE E:e2
          {:RESULT = new Expression(new Args(e1, e2), sym.GTE);:}
          |
          E:e1 LTE E:e2
          {:RESULT = new Expression(new Args(e1, e2), sym.LTE);:}
          |
          E:e1 EQUAL E:e2
          {:RESULT = new Expression(new Args(e1, e2), sym.EQUAL);:}
          |
          E:e1 NOTEQUAL E:e2
          {:RESULT = new Expression(new Args(e1, e2), sym.NOTEQUAL);:};


