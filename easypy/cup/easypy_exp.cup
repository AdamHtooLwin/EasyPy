/* ----------------------User code--------------------*/

package src;

parser code {:

public int

:};
   
/* ------------Grammar symbol declarations----------- */
   
terminal    SEMI, PLUS, MINUS, TIMES, DIVIDE, LPAR, RPAR, EQ, INT, BOOL, CHAR, FLOAT;

terminal Integer   INTEGER_LITERAL;
terminal Boolean   BOOLEAN_LITERAL;
terminal Float     FLOATING_LITERAL;
terminal String    CHAR_LITERAL;
terminal String    ID;

non terminal    program, declaration, statement, assignment_sequence, assignment;
non terminal Expression    expr, E, T, F;
non terminal Type type;

/* Precedences */
precedence left SEMI;
precedence left PLUS, MINUS;
precedence left TIMES;
   
/* ------------Grammar rules----------- */

program ::= declaration:d SEMI statement:s
                {: :};

statement ::= declaration:d SEMI statement:s
                {: :}
              | {: :};

statement ::= assignment_sequence:as SEMI statement:s
                {: :};

assignment_sequence ::= ID:i EQ E:e
                {:

                System.out.println("Assigning variable " + i + " with value" + e);
                Memory m = Memory.getInstance();
                Type var_type = m.SymbolTable.get(i);
                if (var_type == null){
                    System.out.println("Variable " + i + " not initialized!");
                    System.exit(1);
                }
                else {
                    switch(var_type.code){
                        case "int":
                            System.out.println("Storing int in ValueTable");
                            m.ValueTable.put(i, e);
                            break;
                        case "float":
                            System.out.println("Storing float in ValueTable");
                            m.ValueTable.put(i, e);
                            break;
                        case "char":
                            System.out.println("Storing char in ValueTable");
                            m.ValueTable.put(i, e);
                            break;
                        case "bool":
                            System.out.println("Storing bool in ValueTable");
                            m.ValueTable.put(i, e);
                            break;
                    }
                }
                :};

declaration ::= type:t ID:i
                {: System.out.println("Declaring variable " + i + " of type " + t.getCode());
                Memory m = Memory.getInstance();
                m.SymbolTable.put(i, t);
                :};

type ::= INT
            {: RESULT = new Type(Type.INTEGER, "int"); :}
        | FLOAT
            {: RESULT = new Type(Type.FLOAT, "float"); :}
        | CHAR
            {: RESULT = new Type(Type.STRING, "char"); :}
        | BOOL
            {: RESULT = new Type(Type.BOOLEAN, "bool"); :};

E    ::= E:e PLUS T:t
                {: RESULT = e + t; :}
            | E:e MINUS T:t
                {: RESULT = e - t; :}
            | T:t
                {: RESULT = t; :};

T       ::= T:t TIMES F:f
                {:

                 :}
            | T:t DIVIDE F:f
                {: RESULT = t / f; :}
            | F:f
                {:
                if (f.getType.tag == Type.INTEGER){
                    Expression exp = new Expression();
                    exp.setINTEGER_LITERAL(f.getINTEGER_LITERAL);
                }
                :};

F       ::= LPAR E:e RPAR
                {: RESULT = (e); :}
            | INTEGER_LITERAL:n
                {:
                Expression exp = new Expression();
                exp.setINTEGER_LITERAL(n);
                exp.setType(new Type(Type.INTEGER, "int"));
                RESULT = exp;
                :}
            | BOOLEAN_LITERAL:b
                {:
                Expression exp = new Expression();
                exp.setBOOLEAN_LITERAL(b);
                exp.setType(new Type(Type.BOOLEAN, "bool"));
                RESULT = exp;
                :}
            | FLOATING_LITERAL:f
                {:
                Expression exp = new Expression();
                exp.setFLOAT_LITERAL(f);
                exp.setType(new Type(Type.FLOAT, "float"));
                RESULT = exp;
                :}
            | CHAR_LITERAL:c
                {:
                Expression exp = new Expression();
                exp.setCHAR_LITERAL(c);
                exp.setType(new Type(Type.STRING, "char"));
                RESULT = exp;
                :};


